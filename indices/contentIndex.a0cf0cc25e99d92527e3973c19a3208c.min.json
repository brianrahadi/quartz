{"/":{"title":"üè° Home","content":"\nHello! I'm Brian. Currently studying Software Systems (subset of CS) at Simon Fraser University.\n\nI find the world of software to be fascinating because of its ability to improve our lives on a seemingly infinity scale\n\nI am interested in learning all aspects of software development lifecycle. From designing beautiful interfaces, using different programming paradigms, to learning and implementing distributed system that powers the internet as it is today.\n\nI enjoy sharing things on the internet. Below are some of it:\n- [Experience](notes/experience.md) or summary of what I have been doing\n- [Projects](notes/projects.md) I (and my teammates) have built\n- [Tools](notes/tools.md) that have helped me tremendously\n- [Books](notes/books.md) I have read\n- [Blog](notes/blog.md) containing my amateur writings\n- [Restaurants](https://brianrahadi.notion.site/Restaurant-Reviews-2762ef471f4c44bf8221683723835e87) I have been to (notion page for now)","lastmodified":"2023-04-13T03:10:41.520206448Z","tags":[]},"/files/files":{"title":"files","content":"","lastmodified":"2023-04-13T03:10:41.520206448Z","tags":[]},"/notes/7habits":{"title":"Book Summary - 7 Habits of Highly Effective Teens","content":"\n\u003e We need a paradigm, paradigm is the way you see something, your point of view. Paradigms need to be principle-centered\n\u003e \n\n1. Be Proactive\n    - Proactive is the opposite of reactive. They are the one who have the control over your attitude. They make choices based on values. They think before they act. They recognize that they can‚Äôt control everything that happens to them, but they can control what they do about it.\n    - Being proactive is a price to be paid. You need to have responsibility over your choices, find a way to make something happen, and focus on things that you can do. There is only one thing we can control, it is how we respond to what happens to us.\n    \n2. Begin with the End in Mind\n    - Set our dreams to become reality. Try to imagine what our future self will be one year from now.\n    - We need to have our personal mission statement, motto or personal quote that visualize what our life is all about.\n    \n3. Put First Things First\n    - Urgent + Important = Procrastinator\n    - Urgent + Not important = Yes-man (peer pressure)\n    - Not Urgent + Important = Prioritizer\n    - Not Urgent + Not Important =  Slacker\n4. Think Win-Win\n    - Respect each other equally. Never aim for a situation that only benefits one party\n5. Seek First to Understand, Then to Be Understood\n    - Eyes + Heart + Ears \u003e Mouth\n    - Feel the emotion they express rather than each words they presented\n6. Synergize\n    - 2 heads always better than one\n    - Everyone learn and think differently.\n    - Define Problem ‚Üí Your way ‚Üí My way ‚Üí Brainstorming ‚Üí High Way\n7. Sharpen the Saw\n    - 4 body parts you should train regularly\n        - Body ‚Üí Exercise, eat healthy, sleep well, and relax\n        - Brain ‚Üí Education, side hustle\n        - Heart ‚Üí Train your emotions so you are the one that control it. Focus on PBA and RBA\n        - Soul ‚Üí Devotion, journalling, meditating.\n\n         \n\n\u003caside\u003e\nüí° 1-3 = Private victory, 4-6 = Relationship victory, 7 = Renewal\n\n\u003c/aside\u003e","lastmodified":"2023-04-13T03:10:41.520206448Z","tags":[]},"/notes/atomichabits":{"title":"Book Summary - Atomic Habits","content":"\n\u003e ‚ÄùWe are what we repeatedly do. Excellence is not an act, but a habit.‚Äù                 - Aristotle\n\u003e \n\n‚ÄúThe costs of your good habits are in the present. The costs of your bad habits are in the future.‚Äù\n\n- **Habits = Freedom:**¬†‚ÄúHabits do not restrict freedom. They create it. In fact, the people who don‚Äôt have their habits handled are often the ones with the¬†*least* amount of freedom.‚Äù\n- **Systems \u003e Goals:**¬†‚ÄúMy results had very little to do with the goals I set and nearly everything to do with the systems I followed.‚Äù You do not rise to the level of your goals. You fall to the level of your systems.\n- **Effective Habits:**¬†‚ÄúThere are no good habits or bad habits. There are only effective habits. That is, effective at solving problems.‚Äù\n- **Clarity \u003e Motivation:**¬†‚ÄúMany people think they lack motivation when what they really lack is clarity. It is not always obvious when and where to take action. Some people spend their entire lives waiting for the time to be right to make an improvement.‚Äù\n- **Environment \u003e Motivation:**¬†‚ÄúMotivation Is Overrated; Environment Often Matters More‚Ä¶Conventional wisdom holds that motivation is the key to habit change. Maybe if you¬†*really*¬†wanted it, you‚Äôd actually do it. But the truth is, our real motivation is to be lazy and to do what is convenient. And despite what the latest productivity best seller will tell you, this is a smart strategy, not a dumb one.‚Äù\n- Change your **outcome-based habits** (I am quitting smoking because i want to be healthy) to **identity-based habits** (I am not a smoker, why should i smoke?)\n\n**Building Good Habits**\n\n1. Cue (Make it Obvious) : Implement habit stacking with time and location also add things you want to do around you.\n    - To break bad habit, reduce your exposure towards the cue of bad habits\n2. Craving (Make it Attractive) : Use temptation bundling (After workout, you can finally take a shower and break) \n    \n    \u003caside\u003e\n    üí° More probable behaviour reinforces less probable behaviour\n    \n    \u003c/aside\u003e\n    \n    - Your environment around you shapes you. (Workout community support each other to become fit)\n    - For bad habits, you can shift your mindset that this particular habit destroys you and it is not attractive at all.\n3. Response (Make it easy) : Start very small everyday, but never stop or go backward\n4. Reward (Make it satisfying)\n","lastmodified":"2023-04-13T03:10:41.520206448Z","tags":[]},"/notes/blog":{"title":"blog","content":"\nSome of my writings:\n- [Langara to SFU CS Transfer Guide](notes/sfu-cs-transfer-guide.md)\n- [College Transfer Pros and Cons](notes/university-transfer-benefits-and-tips)\n- [Summer 2022 Term Review](notes/term-review-2022summer.md)\n- [Fall 2022 Term Review](notes/term-review-2022fall.md)","lastmodified":"2023-04-13T03:10:41.520206448Z","tags":[]},"/notes/books":{"title":"Books","content":"\nI enjoy reading books. I have mostly read non-fiction books, but trying to explore other genres as well. Here is a list of books that I would recommend to others:\n\n- [Atomic Habits](notes/atomichabits) by James Clear \\\nSuch a good book that helps you to learn the significance of habit and somehow reading it is a bit addicting.\n\n- [How to Become a Straight-A Student](notes/straighta) by Cal Newport \\\nThe title can sound cringy I know, but this book changed my perspective about studying. It has helped me to study effectively to enjoy life outside more.\n\n- [7 Habits of Highly Effective Teens](notes/7habits) by Sean Covey \\\nOne of my first self-help books. It is based on the more popular book by the author's father. For me, the main lesson here is to always think win-win. The game of life is not as competitive as it seems.\n\n- [Deep Work](notes/deepwork) by Cal Newport \\\nSimilar philosophy with Straight-A student, but there is more significance to it. I truly believe that a satisfying work leads to a satisfying life, and this book will help you to achieve that.\n\n- [The Almanack of Naval Ravikant](notes/navalmanack) by Eric Jorgenson \\\nA high-concentration of knowledge in quite a short book. You will learn from Naval Ravikant and his lessons on money creation, philosophy, and happiness.\n\n- Everything is F*cked Up by Mark Manson \\\nThe book that helps me to become more honest and being more in control with my life.\n\n- Sometimes You Win - Sometimes You Learn by John C. Maxwell \\\nMy first self-help book. In this book, it gives an insight on why losing is not necessarily bad and embracing it will make you to learn better.\n\n- [The Subtle Art of Not Giving a F*ck](notes/subtleart) by Mark Manson \\\nMark Manson is very funny. In this book, he delivers life philosophy 101 packed with many swear words. Life is short and this book makes you realize to just focus on what matters more.","lastmodified":"2023-04-13T03:10:41.520206448Z","tags":[]},"/notes/deepwork":{"title":"Book Summary - Deep Work","content":"\n\n\u003e \"The ability to perform deep work is becoming increasingly rare at exactly the same time it is becoming increasingly valuable in our economy.\"\n\u003e\n\n**What is Deep Work?** \\\n‚ÄúProfessional activity performed in a state of distraction-free concentration that push your cognitive capabilities to their limit. These efforts create new value, improve your skill, and are hard to replicate.‚Äù\n\n**Types of Deep Work**\n- Monastic ‚Üí Full deep work, Bimodal ‚Üí Seasonal deep Work, Journalistic ‚Üí Anytime deep work\n- The Rhythmic Philosophy of Deep Work Scheduling  ‚Üí The easiest way to consistently start deep work sessions is to make it a habit. (Block off several hours everyday for deep work)\n\n\n**Building Deep Work Routine**\n1. Location ‚Üí Distraction free for long periods of focus. Use noise canceling headphones and be consistent with your environment.\n2. Duration ‚Üí Start small and use podomoro technique\n3. Structure ‚Üí Define your deep work. (Phone shut down, measurement of success)\n4. Requirements ‚Üí Music choice, beverage of choice\n\n**Execute a Grand Gesture**\n\n\u003e ‚ÄúBy leveraging a radical change to your normal environment, coupled perhaps with a significant investment of effort or money, all dedicated toward supporting a deep work task, you increase the perceived importance of the task.‚Äù\n\u003e \n","lastmodified":"2023-04-13T03:10:41.520206448Z","tags":[]},"/notes/experience":{"title":"Experience","content":"\n## Education\n\n\u003e **Simon Fraser University** (May 2022 - Apr. 2024 Expected) \u003cbr\u003e\n\u003e Bachelor of Science, Computing Science in Software Systems \u003cbr\u003e\n\n\u003e **Langara College** (Sep. 2020 - Apr. 2022) \u003cbr\u003e\n\u003e Associate of Science, Computer Science (Graduated with distinction) \u003cbr\u003e\n\u003e **CGPA: 3.99/4.33** \u003cbr\u003e\n\n## Work Experience\n\n\u003e **Teaching Assistant at Langara College** (Feb. 2022 - Present) \u003cbr\u003e\n\u003e ‚Ä¢ Supports class of 30+ students as the sole TA by communicating in the lab and through announcements and emails \u003cbr\u003e\n‚Ä¢ Grades 60+ weekly programming assignments and provides timely, constructive feedback\u003cbr\u003e\n‚Ä¢ Tutors students with expertise in 11 computer science classes in the help center\u003cbr\u003e\nAvailable Courses to Tutor: (All CPSC) \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1030.html\" target=\"_blank\"\u003e1030\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1045.html\" target=\"_blank\"\u003e1045\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1050.html\" target=\"_blank\"\u003e1050\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1150.html\" target=\"_blank\"\u003e1150\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1155.html\" target=\"_blank\"\u003e1155\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1160.html\" target=\"_blank\"\u003e1160\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1181.html\" target=\"_blank\"\u003e1181\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/2130.html\" target=\"_blank\"\u003e2130\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/2150.html\" target=\"_blank\"\u003e2150\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/2190.html\" target=\"_blank\"\u003e2190\u003c/a\u003e, \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/2221.html\" target=\"_blank\"\u003e2221\u003c/a\u003e\n\n\n## Organization Experience\n\u003e **Lead Web Developer at SFUIA** (Aug. 2022 - Present) \u003cbr\u003e\n\u003e Manages website and social media, also chilling with fellow peeps\n\n\u003e **Vice Lead at Google DSC Langara College** (Jul. 2021 - Apr. 2022) \u003cbr\u003e\n\u003e Hosted some tech topics in Langara (place before I transfer)\n\n## Courses\n\nNote: \n- Langara (Fall 2020 - Spring 2022), SFU (Summer 2022 - Present) \u003cbr\u003e\n- (1/2) -\u003e Shared section with other TA, 1 -\u003e Sole TA for the section\n\n**Fall 2020**\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/APSC/1010.html\" target=\"_blank\"\u003eAPSC 1010 - Engineering and Technology in Society\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/APSC/1050.html\" target=\"_blank\"\u003eAPSC 1050 - Process, Form, and Convention in Professional Genres\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/MATH/1175.html\" target=\"_blank\"\u003eMATH 1175 - Calculus I with Applications to Life Sciences\u003c/a\u003e\n  \n**Spring 2021**\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/MATH/1271.html\" target=\"_blank\"\u003eMATH 1271 - Calculus II\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1050.html\" target=\"_blank\"\u003eCPSC 1050 - Introduction to Computer Science\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1150.html\" target=\"_blank\"\u003eCPSC 1150 - Program Design\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/STAT/1181.html\" target=\"_blank\"\u003eSTAT 1181 - Descriptive and Elementary Inferential Statistics\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/BIOL/1115.html\" target=\"_blank\"\u003eBIOL 1115 - General Biology I\u003c/a\u003e\n\n\n**Summer 2021**\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/PSYC/1215.html\" target=\"_blank\"\u003ePSYC 1215 - Introduction to Social, Personality, and Abnormal Psychology\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1160.html\" target=\"_blank\"\u003eCPSC 1160 - Algorithms and Data Structures I\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1181.html\" target=\"_blank\"\u003eCPSC 1181 - Object-oriented Computing\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/ENGL/1107.html\" target=\"_blank\"\u003eENGL 1107 - Language and Composition\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/MATH/2362.html\" target=\"_blank\"\u003eMATH 2362 - Linear Algebra\u003c/a\u003e\n\n\n**Fall 2021**\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/2150.html\" target=\"_blank\"\u003eCPSC 2150 - Algorithms and Data Structures II\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/2190.html\" target=\"_blank\"\u003eCPSC 2190 - Theoretical Foundations of Computer Science\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/ENGL/1123.html\" target=\"_blank\"\u003eENGL 1123 - Introduction to Academic Writing\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/PSYC/1115.html\" target=\"_blank\"\u003ePSYC 1115 - Introduction to Biological, Cognitive, and Developmental Psychology\u003c/a\u003e\n\n**Spring 2022**\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/2130.html\" target=\"_blank\"\u003eCPSC 2130 - Multimedia and Animation\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/2221.html\" target=\"_blank\"\u003eCPSC 2221 - Database Systems\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/STAT/2281.html\" target=\"_blank\"\u003eSTAT 2281 - Probability and Elementary Mathematical Statistics\u003c/a\u003e\n- \u003ca href=\"https://langara.ca/programs-and-courses/courses/ENGL/1130.html\" target=\"_blank\"\u003eENGL 1130 - Modern Novel, Poetry, and Movie\u003c/a\u003e\n- TA \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1045.html\" target=\"_blank\"\u003eCPSC 1045\u003c/a\u003e (1) and \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1155.html\" target=\"_blank\"\u003eCPSC 1155\u003c/a\u003e (1)\n\n\n**[Summer 2022](notes/term-review-2022summer)**\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2022/summer/courses/cmpt/295.html\" target=\"_blank\"\u003eCMPT 295 - Computer Systems\u003c/a\u003e\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2022/summer/courses/cmpt/276.html\" target=\"_blank\"\u003eCMPT 276 - Introduction to Software Engineering\u003c/a\u003e\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2022/summer/courses/cmpt/213.html\" target=\"_blank\"\u003eCMPT 213 - Object Oriented Design in Java\u003c/a\u003e\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2022/summer/courses/educ/100w.html\" target=\"_blank\"\u003eEDUC 100W - Selected Questions and Issues in Education\u003c/a\u003e\n- TA \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1030.html\" target=\"_blank\"\u003eCPSC 1030\u003c/a\u003e (1/2), \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1045.html\" target=\"_blank\"\u003eCPSC 1045\u003c/a\u003e (1/2), and \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1150.html\" target=\"_blank\"\u003eCPSC 1150\u003c/a\u003e (1)\n\n**[Fall 2022](notes/term-review-2022fall)**\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2022/fall/courses/cmpt/307.html\" target=\"_blank\"\u003eCMPT 300 - Operating Systems\u003c/a\u003e\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2022/fall/courses/cmpt/371.html\" target=\"_blank\"\u003eCMPT 371 - Networking I\u003c/a\u003e\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2022/fall/courses/cmpt/383.html\" target=\"_blank\"\u003eCMPT 383 - Comparative Programming Languages\u003c/a\u003e\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2022/fall/courses/cmpt/272.html\" target=\"_blank\"\u003eCMPT 272 - Web I - Client-side Web Development\u003c/a\u003e\n- TA \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1045.html\" target=\"_blank\"\u003eCPSC 1045\u003c/a\u003e (1)\n\n**Spring 2023**\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2023/spring/courses/cmpt/431.html\" target=\"_blank\"\u003eCMPT 431 - Distributed Systems\u003c/a\u003e\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2023/spring/courses/cmpt/307.html\" target=\"_blank\"\u003eCMPT 307 - Data Structures and Algorithms\u003c/a\u003e\n- \u003ca href=\"https://www.sfu.ca/students/calendar/2023/spring/courses/cmpt/363.html\" target=\"_blank\"\u003eCMPT 363 - User Interface Design\u003c/a\u003e\n- TA \u003ca href=\"https://langara.ca/programs-and-courses/courses/CPSC/1045.html\" target=\"_blank\"\u003eCPSC 1050\u003c/a\u003e (2)\n","lastmodified":"2023-04-13T03:10:41.520206448Z","tags":[]},"/notes/navalmanack":{"title":"Book Summary - The Almanack of Naval Ravikant","content":"\n# Building Wealth\n\n### Understand How Wealth Is Created\n\nIt‚Äôs not really about hard work. You can work in a restaurant eighty hours a week, and you‚Äôre not going to get rich. Getting rich is about knowing what to do, who to do it with, and when to do it. It is much more about understanding than purely hard work.\n\nWealth is the thing you want. Wealth is assets that earn while you sleep. Wealth is the factory, the robots, cranking out things. Wealth is the computer program that‚Äôs running at night, serving other customers. Wealth is even money in the bank that is being reinvested into other assets, and into other businesses.\n\n### Find a Position of Leverage\n\nWe live in an age of infinite leverage, and the economic rewards for genuine intellectual curiosity have never been higher. Following your genuine intellectual curiosity is a better foundation for a career\n\nCoding, writing books, recording podcasts, tweeting, YouTubing‚Äîthese kinds of things are permissionless. You don‚Äôt need anyone‚Äôs permission to do them, and that‚Äôs why they are very egalitarian. They‚Äôre great equalizers of leverage. Every great software developer, for example, now has an army of robots working for him at nighttime while he or she sleeps, after they‚Äôve written the code, and it‚Äôs cranking away.\n\n### Prioritize and Focus\n\nStatus games are always going to exist. There‚Äôs no way around it, but realize most of the time, when you‚Äôre trying to create wealth and you‚Äôre getting attacked by someone else, they‚Äôre trying to increase their own status at your expense. They‚Äôre playing a different game.\n\n### Find Work That Feels Like Play\n\nWhat you really want is freedom. You want freedom from your money problems, right? I think that‚Äôs okay. Once you can solve your money problems, either by lowering your lifestyle or by making enough money, you want to retire. Not retirement at sixty-five years old, sitting in a nursing home collecting a check retirement‚Äîit‚Äôs a different definition.\n\nWell, one way is to have so much money saved that your passive income (without you lifting a finger) covers your burn rate. A second is you just drive your burn rate down to zero‚Äîyou become a monk. A third is you‚Äôre doing something you love. You enjoy it so much, it‚Äôs not about the money. So there are multiple ways to retirement.\n\nAnother thing that helps: I value freedom above everything else. All kinds of freedom: freedom to do what I want, freedom from things I don‚Äôt want to do, freedom from my own emotions or things that may disturb my peace. For me, freedom is my number one value.\n\n### How to Get Lucky\n\nWays to get lucky: ‚Ä¢ Hope luck finds you. ‚Ä¢ Hustle until you stumble into it. ‚Ä¢ Prepare the mind and be sensitive to chances others miss. ‚Ä¢ Become the best at what you do. Refine what you do until this is true. Opportunity will seek you out. Luck becomes your destiny.\n\n‚ÄúIn a long-term game, it seems that everybody is making each other rich. And in a short-term game, it seems like everybody is making themselves rich.‚Äù\n\nI have great people in my life who are extremely successful, very desirable (like everybody wants to be their friend), very smart. Yet, I‚Äôve seen them do one or two things slightly not great to other people. The first time, I‚Äôll say, ‚ÄúHey, I don‚Äôt think you should do this to that other person. Not because you won‚Äôt get away with it. You will get away with it, but because it will hurt you in the end.‚Äù\n\n### Be Patient\n\nOne thing I figured out later in life is generally (at least in the tech business in Silicon Valley), great people have great outcomes. You just have to be patient. Every person I met at the beginning of my career twenty years ago, where I looked at them and said, ‚ÄúWow, that guy or gal is super capable‚Äîso smart and dedicated‚Äù‚Ä¶all of them, almost without exception, became extremely successful. You just had to give them a long enough timescale. It never happens in the timescale you want, or they want, but it does happen.\n\nThis is not to say it‚Äôs easy. It‚Äôs not easy. It‚Äôs actually really freaking hard. It is the hardest thing you will do. But it‚Äôs also rewarding. Look at the kids who are born rich‚Äîthey have no meaning to their lives.\n\nMoney buys you freedom in the material world. It‚Äôs not going to make you happy, it‚Äôs not going to solve your health problems, it‚Äôs not going to make your family great, it‚Äôs not going to make you fit, it‚Äôs not going to make you calm. But it will solve a lot of external problems. It‚Äôs a reasonable step to go ahead and make money.\n\n# Building Judgment\n\nHard work is really overrated. How hard you work matters a lot less in the modern economy.\n\nLearn to Love to Read\n\nReading a book isn‚Äôt a race‚Äîthe better the book, the more slowly it should be absorbed.\n\nThe best way to have a high-quality foundation (you may not love this answer), but the trick is to stick to science and to stick to the basics. Generally, there are only a few things you can read people don‚Äôt disagree with. Very few people disagree 2+2=4, right? That is serious knowledge. Mathematics is a solid foundation.\n\nI came up with this hack where I started treating books as throwaway blog posts or bite-sized tweets or posts. I felt no obligation to finish any book. Now, when someone mentions a book to me, I buy it. At any given time, I‚Äôm reading somewhere between ten and twenty books. I‚Äôm flipping through them.\n\n# Learning Happiness\n\nWe are highly judgmental survival-and-replication machines. We constantly walk around thinking, ‚ÄúI need this,‚Äù or ‚ÄúI need that,‚Äù trapped in the web of desires. Happiness is the state when nothing is missing. When nothing is missing, your mind shuts down and stops running into the past or future to regret something or to plan something.\n\nHappiness to me is mainly not suffering, not desiring, not thinking too much about the future or the past, really embracing the present moment and the reality of what is, and the way it is.\n\nIt‚Äôs most obvious if you ever just sit down and try and do nothing, nothing. I mean nothing, I mean not read a book, I mean not listen to music, I mean literally just sit down and do nothing. You can‚Äôt do it, because there‚Äôs anxiety always trying to make you get up and go, get up and go, get up and go. I think it‚Äôs important just being aware the anxiety is making you unhappy. The anxiety is just a series of running thoughts.\n\nWhen a lot of people say happiness, they mean joy or bliss, but I‚Äôll take peace.\n\nDesire is a contract you make with yourself to be unhappy until you get what you want.\n\nThere‚Äôs the ‚Äúfive chimps theory‚Äù where you can predict a chimp‚Äôs behavior by the five chimps it hangs out with the most. I think that applies to humans as well. Maybe it‚Äôs politically incorrect to say you should choose your friends very wisely. But you shouldn‚Äôt choose them haphazardly based on who you live next to or who you happen to work with. The people who are the most happy and optimistic choose the right five chimps.\n\n# Saving Yourself\n\n‚ÄúEasy choices, hard life. Hard choices, easy life.‚Äù\n\nWhen you really want to change, you just change. But most of us don‚Äôt really want to change‚Äîwe don‚Äôt want to go through the pain just yet. At least recognize it, be aware of it, and give yourself a smaller change you can actually carry out.\n\nNumber one: read. Read everything you can. And not just the stuff that society tells you is good or even books that I tell you to read. Just read for its own sake. Develop a love for it. Even if you have to read romance novels or paperbacks or comic books. There‚Äôs no such thing as junk. Just read it all.\n\nRelated to the skill of reading are the skills of mathematics and persuasion. Both skills help you to navigate through the real world.\n\n# Philosophy\n\nHonesty is a core, core, core value. By honesty, I mean I want to be able to just be me. I never want to be in an environment or around people where I have to watch what I say.\n\nAnother example of a foundational value: I don‚Äôt believe in any short-term thinking or dealing. If I‚Äôm doing business with somebody and they think in a short-term manner with somebody else, then I don‚Äôt want to do business with them anymore.\n\nI would say my philosophy falls down to this‚Äîon one pole is evolution as a binding principle because it explains so much about humans, on the other is Buddhism, which is the oldest, most time-tested spiritual philosophy regarding the internal state of each of us.","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]},"/notes/projects":{"title":"Projects","content":"\nOne of the reasons why I liked software is how easy it is to build things with minimal tools (just a laptop and an internet!).\n\n---\n\n## MindfulU\n\n![[notes/images/mindfulu.jpeg]]\n\nMindfulU centralizes information on mental health services offered by UBC, SFU and other organizations. It assists students in finding, learning about and using mental health resources through features like a chatbot, meditation mode and an interactive services map.\n\n\u003ca target=\"_blank\" href=\"https://github.com/LenaWang03/NW-Hacks-2023\"\u003eGitHub\u003c/a\u003e\u0026emsp;\u003ca target=\"_blank\" href=\"https://nw-hacks-2023.vercel.app/\"\u003eWebsite\u003c/a\u003e\u0026emsp;\n\u003ca target=\"_blank\" href=\"https://devpost.com/software/mindfulu-eo6fbg\"\u003eDevpost\u003c/a\u003e\n\n## sfuia.com\n\n![[notes/images/sfuia-website.png]]\n\nSimon Fraser University Indonesian Association's website acts as the information hub for Indonesian students at SFU. Currently, we use Next.js (framework of react.js) as it feels nicer to build with its routing, better images, and rendering. I decided to use Contentful to allow people to contribute to the blog post easily without accessing the source code (easily published and editted).\n\nStack: Next.js, Bootstrap, SASS, Contentful API (for blog), SendGrid API (for mail), Vercel\n\n\u003ca target=\"_blank\" href=\"https://github.com/sfuia/sfuia-website\"\u003eGitHub\u003c/a\u003e\u0026emsp;\u003ca target=\"_blank\" href=\"https://www.sfuia.com/\"\u003eWebsite\u003c/a\u003e\n\n---\n\n## Parkland\n\n![[notes/images/parkland.jpg]]\n\nA full-stack amusement park website that have many features. It allows user login, signup, and it has its own reviews page with full CRUD functionality. User can make their own cards as an entry ticket and add the balance using **Stripe API**.\n\nStack: Express, Node.JS, PostgreSQL, Stripe API, WeatherAPI, Mocha, Chai\n\n\u003ca target=\"_blank\" href=\"https://github.com/brianrahadi/parkland\"\u003eGitHub\u003c/a\u003e\u0026emsp;\u003ca target=\"_blank\" href=\"https://www.youtube.com/watch?v=eMDrgqQ6-TY\u0026list=PLsMwgYc1l_V03D-kKRaXcnumVEb8k8ot_\u0026index=2\"\u003eYoutube\u003c/a\u003e\n\n---\n\n## Pig Locator\n\n![[notes/images/pig-locator.png]]\n\nAngular website to locate missing pigs with reports and maps stored as JSON in Data Manager API. Location is visualized in a map built with Leaflet and Mapbox API. \u003cbr\u003e\nCRUD operation on reports is possible through the Data Manager API.\n\nTech Stack: Angular, Angular Material, TypeScript, Leaflet, Mapbox API, Data Manager API\n\n\u003ca target=\"_blank\" href=\"https://github.com/brianrahadi/pig-locator\"\u003eGitHub\u003c/a\u003e\u0026emsp;\u003ca target=\"_blank\" href=\"pig-locator.brianrahadi.com\"\u003eWebsite\u003c/a\u003e\u0026emsp;\u003ca target=\"_blank\" href=\"https://www.youtube.com/watch?v=PiQZpUfYscM\u0026ab_channel=BrianRahadi\"\u003eYoutube\u003c/a\u003e\n\n## The Movie Corner\n\n![[notes/images/movie.jpg]]\n\nA movie database website to see list of movies based on various categories (Popular, Upcoming, Action, Drama, Romance).\n\nStack: React, Bootstrap, Axios, and TMDb API\n\n\u003ca target=\"_blank\" href=\"https://github.com/brianrahadi/movie-list\"\u003e GitHub\u003c/a\u003e\u0026emsp;\u003ca target=\"_blank\" href=\"https://movie-list-brianrahadi.vercel.app/\"\u003eWebsite\u003c/a\u003e\n\n---\n\n## Multithreaded Chatroom\n\n![[notes/images/chatroom.png]]\n\nA chatroom with many features built in Java implemented with multithreading concepts where each client runs as a single thread. This chatroom allows everyone with the same IP Address and port to chat with each other.\n\nStack: Java, Socket\n\n\u003ca target=\"_blank\" href=\"https://github.com/brianrahadi/java-multithreaded-chatroom\"\u003e GitHub\u003c/a\u003e\n\n---\n\n## Amazing Package Deliveries Tracker\n\n![[notes/images/package.png]]\n\nA package deliveries tracker to store packages information and show the packages based on its status (All, Overdue, Upcoming). The packages information is stored in the server and uses **Spring** to fetches/ updates the data. The component is separated with MVC (Model-View-Controller) architecture to ensure code is readable and understandable. Received full grade in the last iteration.\n\nStack: Java Swing, GSON, Spring\n\n\u003ca target=\"_blank\" href=\"https://github.com/brianrahadi/package-tracker\"\u003e GitHub\u003c/a\u003e\n\n---\n\n## Arcade Games\n\n![[notes/images/arcade-games.gif]]\n\nA fun arcade game that lets you play ping-pong, snake, and crossing road. This game is built with Object-oriented programming paradigm to make code more reusable and clearer to see.\n\nStack: Python, Turtle\n\n\u003ca target=\"_blank\" href=\"https://github.com/brianrahadi/arcade-games\"\u003e GitHub\u003c/a\u003e\n\n## Rename Unzipper Script\n\n![[notes/images/rename-unzipper.gif]]\n\nPython script to rename and unzip all students' files to be easily opened and ordered alphabetically. Though simple, it has saved me tons of time in marking students' assignments.\n\nStack: Python\n\n\u003ca target=\"_blank\" href=\"https://github.com/brianrahadi/rename-unzipper\"\u003e GitHub\u003c/a\u003e\n","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]},"/notes/sfu-cs-transfer-guide":{"title":"Langara CS to SFU CS/ SoSy Transfer Guide","content":"Last Updated: 28 June 2022\n## Introduction\nHello! My name is Brian. I have just transferred to Simon Fraser University's Software Systems program this summer after graduating from Langara with an Associate in Computer Science.\n\nIn this guide, I will show you all the knowledge that I have accumulated to successfully transfer to Simon Fraser University (CS/ SoSy). You can also check out [this guide](https://www.reddit.com/r/langara/comments/ufzqc0/guide_for_cs_students_planning_to_transfer_to_ubc/) for the UBC version.\n\nMy guide here is mainly intended for Langara College students aiming to transfer to SFU. Though the general advice may still apply if you are from other colleges :).\n\nDisclaimer: transfer requirements may change at any point in time. It is best to verify the requirements on the university's website and check with advising. I will not be responsible for any misinformation caused if, by any chance, some parts of this guide are not up-to-date anymore. Though if you find one, I will heavily appreciate it if you can contact me so I'll update the guide :).\n\n## Applying to SFU\nYou need to use [EducationPlannerBC](https://educationplannerbc.ca/) to apply to SFU. You can go to the Apply section and sign up/log in with your EducationPlannerBC Account. \n\nIf the application process has not been changed, you can choose up to 2 areas of the program to apply to. The first program is the one you want to get into and the second one is the backup program.\n\nThere are 2 possible strategies that I learned here:\n- If you have a decent grade, you can choose both Software Systems and Computer Science in both of your options. This maximizes the chances for you to take computer science courses later.\n- If you are not too sure whether you will get in, you can choose either Software Systems/ Computer Science as your first option and choose any program that is usually less competitive to get into. This maximizes the chance for you to get into SFU first.\n\nChecking [Admission Averages](https://www.sfu.ca/students/admission/apply/admission-averages.html) is highly recommended. The difficulty may vary whether you are a domestic or international student. In the past, Software Systems has lower GPAs than Computer Science (but not always).\n\nFor the second option, if you got admitted to your second option. I would recommend to still continue taking courses at Langara if you still have less than 60 credits. Many people agreed that internal transfer (changing major) is harder than external transfer. Though if you are unsure, you can check simonfraser reddit and search around this topic.\n\n## General Strategy\nDepending on your confidence in your ability to get good GPAs, there are different ways to take your courses and when to transfer. I will describe it here below.\n\nWays to pick the courses:\n1. **The Smart Way** - Focus on only taking the core requirements. This is best suited for those who are confident they can get the grade requirement to transfer. This strategy will benefit you later in the university where you will still have many rooms for electives.\n2. **The Booster Way** - Take the core requirements and also several electives at Langara. This is best suited for those who are not sure whether they can achieve the required GPA. By carefully picking the courses that might potentially boost the GPA, the person using this strategy may have a higher chance to get into SFU.\n\nFrom my experience,  MATH and ENGL are famous as a GPA downer. This also heavily depends a lot on the person's liking.\n\nWhen to transfer:\n1. **Associate Transfer**  - If you are transferring with an associate degree, you will receive a preference in admission by having a GPA of 0.25 points less than the regular transfer. [Source](https://www.bctransferguide.ca/learn-more-about/associate-degrees/transfer/)\n2. **Quick Transfer**  - Best suited for those who currently have a good average and/or those who want to get into the university as soon as possible. This is also good if you want to get into the coop program as soon as possible.\n3. **Full Transfer**  - Transfers with a lot of credits but do not finish with an associate degree.\n\nChoosing when to transfer also heavily determines how you will pick the courses. Usually, Associate transfer does not really let you choose which courses to take (unlike the 2 other ways). I end up taking all the required MATH and ENGL courses.\n\nIn general, more transferred credits will save you money while transferring quickly will allow you to get into the coop program quickly. There are no better ways of transferring as each has its own pros and cons.\n\nI personally prefer to get the associate first to save cost. As of Sept 1, 2022, 1 SFU credit is $1,059.15 while 1 Langara credit is $625.40 (International student fees). I also get to enjoy the smaller class experience here.\n\n## Admission Requirements\n[SFU Admission Requirements](https://www.sfu.ca/students/admission/admission-requirements/transfer/college-university.html).\n\nAs this topic may change at any point in time, checking the website above is highly recommended.\n\nHere are the requirements that you need to take as a college transfer student:\n-   [English Language admission requirement](https://www.sfu.ca/students/admission/admission-requirements/english-language-requirement.html)\n-   [Quantitative and Analytical skills requirement](https://www.sfu.ca/students/admission/admission-requirements/quantitative-skills-requirement.html)\n\nMinimum 24 units of transferable coursework, including:\n\n-   One Mathematics course from: \n\t-   MACM 101 = LANG CPSC 2190 (Discrete Math)\n\t-   MATH 150 (or 151) = LANG MATH 1171 (Calculus 1)\n\t-   MATH 152 = LANG MATH 1271 (Calculus 2)\n\t-   MATH 240 (or 232) = LANG MATH 1252 (or 2362)\n-   One Computing Science course from: \n\t-   CMPT 125 (or 126, 128 or 135) = LANG CPSC 1181 (or 1155)\n\t-   CMPT 225 = LANG CPSC 2150\n\t-   CMPT 276 (or 275) = LANG CPSC 2350\n-   One additional Mathematics or Computing science course chosen from the above lists.\n\n## Langara Courses to Take\nUseful websites to determine these courses:\n- [BCTransferGuide](https://www.bctransferguide.ca/search)\n- [SFU CS Fall 2022](http://www.sfu.ca/students/calendar/2022/fall/programs/computing-science/major/bachelor-of-science-or-bachelor-of-arts.html)\n- [SFU SoSy Fall 2022](http://www.sfu.ca/students/calendar/2022/fall/programs/software-systems/major/bachelor-of-science.html)\n- [Langara CS Associate](https://langara.ca/programs-and-courses/programs/computer-science/program-curriculum.html)\n\nFirst and foremost, I highly emphasize the importance of choosing the right course and the right professor. It is quite common to see people picking the wrong course, thus ending up wasting a lot of time and money.\n\nI define 3 types of courses that can be taken here:\n1. Core  - Core for SFU CS/ SoSy graduation requirement. \n2. Recommended - Not core, but useful to take (either GPA booster or count towards SFU CS/ SoSy electives requirement).\n\n\n\n\n### Core Courses\nI mainly define core courses as courses that are part of the graduation requirement at SFU. Bare in mind that you do not need to take all core courses to transfer to SFU.\nIf you intend to transfer ASAP, taking CPSC 1150, 1181, Math 1171, and 1271 is sufficient.\n\n**NOT ALL  CORE COURSES ARE RECOMMENDED**.\n\nI won't recommend taking STAT 2281 unless you have no other choice.\nI also won't recommend taking CPSC 2350 by any means since it has 6 credits as prerequisite (CPSC 1030 and CPSC 1045). Other core courses except these two should be fine to take.\n\n\u003cfigure\u003e\n\t\u003cimg src=\"../images/course-diagram.png\" alt=\"Course Diagram\" width=\"100%\"/\u003e\n\t\u003cfigcaption style=\"text-align: center;\"\u003e CPSC and MATH Course Prerequisite Diagram\n\t\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n1. **CPSC 1150: Program Design (3) -\u003e SFU CMPT 120 (3)**\n\t- Introduction to programming in Java. You will mainly learn about pseudocode, the basic syntax of Java (if/else, loop), and recursion (only tracing) in the last week.\n\t- Prerequisite for most computer science courses in Langara (CPSC 1181, CPSC 2190, CPSC 2221)\n\t- Alternatively, CPSC1155 is also available (Introduction in C++). It transfers to CMPT 120/128/130 but I heavily recommend just taking CPSC1150 as (1) Java is generally easier, (2) Java knowledge is required in CPSC 1181, and (3) you will learn enough C++ in CPSC1160 and CPSC 2150.\n\t- Taken online with Bita Shadgar, her style of teaching is not my favorite. However, she is kind and patient, and always asks if in doubt.\n2. **CPSC 1181: Object-oriented Computing (3) -\u003e SFU CMPT 125 (3)**\n\t- More programming in Java. You will mainly learn about Object-Oriented Programming (OOP). Some other topics like JavaFX, multithreading and networking may be included.\n\t- Taken online with Hossein Darbandi, he is the definition of work smart. All lectures are recorded and usually, he likes to take a tea break. Can be quite condescending at times, but he will answers the question regardless.\n3. **CPSC 1160: Algorithms and Data Structures I -\u003e SFU CMPT 1XX (3)**\n\t- Algo and DS in C++. You will learn a lot about recursion, linked lists, and trees.\n\t- I find CPSC 1160 to be harder than 1181. So, even though you can take 1160 after 1150, I highly recommend taking CPSC 1181 first. Taking CPSC1160 and CPSC1181 at the same term can drain your energy as you will need to do 2 coding assignments every week.\n\t- Required for CPSC 2150. Do not take this course if you don't intend to take CPSC 2150 as it transfers only to general credit.\n\t- Taken online with Muntaseer Salahuddin. He is one of the best CS lecturers in my time at Langara. Very passionate, funny, kind, and willing to answer your questions. His exam was the hardest for CS, but possibly because I took it online.\n4. **CPSC 2150: Algorithms and Data Structures II -\u003e SFU CMPT 225 (3)**\n\t- Second part of Algo and DS. CPSC 1160 topics are revisited. Will also learn about stacks, queues, heaps, and graph theory.\n\t- I spent a lot of time in this course. The assignment is heavy (but interesting). The most favorite part is that the exam is more on the doable side. Possibly because I took it offline.\n\t- Taken with Gladys Monagan. She is my favorite instructor at Langara. As long as you show some effort in doing the assignment and ask good questions, she is willing to go above and beyond to help you.\n5. **CPSC 2190: Theoretical Foundations of Computer Science -\u003e SFU MACM 101 (3)**\n\t- Discrete Math. Quite different compared to calculus and the likes. You will learn about proofing, counting, and many other things.\n\t- Some people hate it, and some like it. I am more on the latter part. This is my favorite math course as it reminds me of youtube riddles. Here is [one of the topics](https://en.wikipedia.org/wiki/Knights_and_Knaves) it covers.\n\t- Do a lot of suggested problems to familiarize yourself with the concepts. It may be given in the course outline, if it is there, do it! There is a high chance it will be included in quizzes or exams.\n\t- Taken with Mahdad Khatirinejad. My favorite math professor at Langara. He is really good at answering any questions you have and his lecture is really engaging. One thing I don't like with his delivery is that the quizzes are held at the end of class (some people prefer to study instead of listening to his lecture). Also, the minimum to get A+  is 96 (he scales though).\n\t- Other people that I know took this course with Haotian Pang. The assignment is worth more in his class and the minimum for A+ is 90.\n6. **CPSC 2350: Software Practices -\u003e SFU CMPT 276 (3)**\n\t- Core, but not recommended to take.\n\t- Learn about git and other software engineering tools.\n\t- Technically, it's a core but I didn't take it as it requires CPSC 1030 and 1045 as its prerequisites (CPSC 1030 and 1045 do not count for graduation).\n\t- Heavily recommended to just take this equivalent course later at SFU. CMPT 276 at SFU is famous for its hands-on group projects that will allow you to build interesting projects. I am taking CMPT 276 this summer and we are building a full-stack web application. The languages used may vary depending on the professor though (can be Java, JavaScript, Swift, and Ruby just to name some).\n7. **MATH 1171: Calculus 1 -\u003e SFU MATH 151 (3)**\n\t- Can be challenging for some people. Grind the suggested exercises and WebAssign to make sure you know the stuff.\n\t- Interestingly, I didn't take this course as I didn't have the prerequisite at that time. I took MATH 1175 instead.\n\t- Alternatively, you can take MATH 1173 (4). 1 more credit means $625.4 more expensive. Not really recommended unless you cannot take 1171 due to some reasons (MDT/ waitlist).\n\t- You can also choose to take MATH 1174 (business)/ MATH 1175 (life science). I don't recommend it as you need to get at least a B+ to make sure it is counted towards graduation in SFU.\n\t- Taken online with Pichmony Anhaouy. He is really caring and the exam is on the easy side personally. Lecture notes are really organized. Recommended.\n8. **MATH 1271: Calculus 2 -\u003e SFU MATH 152 (3)**\n\t- Same advice as MATH 1171. Grind the suggested exercises if you are worried you won't do good.\n\t- You can choose to also take MATH 1273/1274/1275. But I still won't recommend it due to reasons similar to calculus 1's.\n\t- Coming from MATH 1175, I find this course to be harder. A lot more concepts and formulas. Conceptually, I don't find it that hard for each section. However, you need to understand which tool needs to be used for which problem. That is what makes it challenging.\n\t- Taken online with Mahdad Khatirinejad. Really good :).\n9. **MATH 2362: Linear Algebra -\u003e SFU MATH 240 (3)**\n\t- Linear Algebra. Personally, I enjoy the content better than calculus. But unlike calculus, I don't get to learn its applications, making it feels useless as I don't know what I am going to use it for. However, this will be useful if you intend to learn computer graphics.\n\t- Don't forget to grind the suggested exercises!\n\t- While this course can be taken as a corequisite with Calculus 2, I heavily recommend against it as taking these two in the same term will cause your brain to burst. Take it only if you are confident with math or have a lighter workload overall.\n\t- Taken online with Pichmony Anhaouy. In the latter part of the courses, I kind of memorized the concepts for the final. Ended up getting a good grade but feels like I don't get the whole concept.\n10. **STAT 2281: Probability and Elementary Mathematical Statistics -\u003e SFU STAT 270 (3)**\n\t- Core, but not recommended to take at Langara.\n\t- All about discrete and continuous probabilities. Applications and proofs.\n\t- Hardest math/stat course so far personally. Unless you are transferring with an associate or have no other courses to take, I don't think you need to take this course at Langara. The grade that I got in this course is far below my other math courses. I have a friend in SFU taking STAT 270 and it was easier and covers a narrower topic.\n\t- Taken with Ken Li (Shuk Wong Li). He is a funny guy, but I don't find he was ready to teach this course. The assignment is almost always due on Sunday, My group of friends taking this basically had no weekend for the latter half of the term :)). I can see that he can be good at teaching the lower-level courses, but the concept in this course was just too hard to be taught and he makes a lot of calculation mistakes on the whiteboard. He might be better in the future though (I took it when it was his first time teaching this course). There was one time when he asks who finished the assignment and only one guy raised his hands up xD.\n\n### Recommended Courses\nI define recommended courses as courses that are not part of the core requirements of the CS/ SoSy major but definitely can be taken towards either SFU graduation requirements (upper-division CS, WQB requirement) and/or Langara graduation requirements.\n\n1. **CPSC 1050: Introduction to Computer Science -\u003e SFU CMPT 1XX (3)**\n\t- WARNING: does not count towards anything in SFU, just a general elective. I still listed this course because required for the associate degree.\n\t- Does not really transfer to CS course. However, this course gives a brief overview of what a CS degree looks like. The topic is quite similar to [Harvard CS50](https://www.google.com/search?q=harvard+cs50\u0026oq=harvard+cs50\u0026aqs=chrome..69i57.2447j0j1\u0026sourceid=chrome\u0026ie=UTF-8).\n\t- Has a lot of assignments. I don't find it to be that hard, but it is by no means a light course. If you are diligent, this course can be a good GPA booster.\n\t- Taken online with Alireza Osareh, his assignments have clear instructions. Even if unclear, you can always ask him to provide more clarity. Good!\n2. **CPSC 2130: Multimedia and Animation -\u003e SFU CMPT 365 (3)**\n\t- The most interesting CS courses (though not as useful) I have taken here. The topic is about image, audio, and video tools using JavaScript and technologies. We used Adobe Photoshop, Adobe Premiere Pro, and Adobe Audition in this course.\n\t- I got to make [3D Ping Pong](https://brianrahadi.github.io/3d-pingpong/) and [Bird Comet Escape](https://brianrahadi.github.io/bird-comet-escape/) in this course :D.\n\t- CMPT 365 is not really taken a lot in SFU, but taking here will help you to finish the upper-division CS requirement.\n\t- While this course is really interesting, it can be hard for those who have no experience of HTML/ CSS/ JS. I have exposure to these language, so it was really not a problem for me.\n\t- Taken with Anupama Gupta. She is really kind and understanding. Most of the lectures were recorded even though it is offline classes. I personally prefer it this way though.\n3. **CPSC 2221: Data Base Systems -\u003e SFU CMPT 354 (3)**\n\t-\tDatabase is a really useful course. I believe most people in the CS program will also take this course, so it's better if you take it now.\n\t-\tMore focused on the database design and SQL queries. We don't really learn how to use the database, link it to the website, and deploy it to the cloud here.\n\t-\tI find this to be one of the easier courses. It might also be because I took it in the last term after finishing most cs courses. Really interesting IMO.\n\t-\tTaken with Saeed Mirjalili. Really engaging lecture and helpful. Not really accessible through email. Recommended to just ask him questions in person.\n4. **APSC 1010: Engineering and Technology in Society and APSC 1050: Process, Form, and Convention in Professional Genres -\u003e SFU ENSC 100 (3) B-Hum/Sci and SFU ENSC 105 (3)**\n\t- Combined as this course is a co-requisite. I would say this is useful if you intend to transfer to SoSy as ENSC 105 counts as the writing requirement. You can use ENSC 100 for the breadth requirement.\n\t- APSC 1050 is taken with Hannah Gustafson. Her online lecture is the best I have had so far as she really tries to make the class as engaging as possible. She also has a cute little baby. Highly recommended!\n\t- APSC 1010 is taken with Zahra Tayarani. I don't think she is teaching again. The lecture is a bit boring as she basically only reads out the slides.\n5. **PSYC 1115: Introduction to Biological, Cognitive, and Developmental Psychology -\u003e SFU PSYC 100 (3) B-Soc**\n\t- Counted as B-Soc for SFU WQB requirement.\n\t- This psychology course is more biology-like. I took this after taking PSYC 1215. Honestly, I prefer PSYC 1215 more as I find social psychology to be more interesting.\n\t- Not always a GPA booster in my opinion. Take it if you think you enjoy reading textbooks and are good at memorizing.\n\t- Taken online with Noushine Afshar. I don't really get to interact with her as it was online and every lecture is recorded. PSYC 1115 and 1215 are mostly just self-learning through the launchpad. The course has 3 exams (the last one is cumulative).\n6. **PSYC 1215: Introduction to Social, Personality, and Abnormal Psychology -\u003e SFU PSYC 102 (3) B-Soc**\n\t- Counted as B-Soc for SFU WQB requirement.\n\t- Not always a GPA booster in my opinion. Take it if you think you enjoy reading textbooks and are good at memorizing.\n\t- Social Psychology. Arguably the most interesting course I have taken outside my major. I find some concepts here that really make sense and I like to apply them in my daily life (ex. bystander effect, spotlight effect, confirmation bias, discrimination)\n\t- Taken online with Laura Adams. Really enjoyable lecture with her.\n7. **CPSC 1030: Web Development I or CPSC 1045: Introduction to Web Programming -\u003e SFU CMPT 165 (3) BOTH**\n\t- Not counted at all for SFU graduation requirement nor Langara associate requirement. You can still count them as general elective though.\n\t- Labelled as B-Sci, but this is a CPSC course. It will not be counted towards breadth for CS/ SoSy Major.\n\t- If your GPA is slightly below 3.7, I heavily recommend taking this course to get that sweet transfer scholarship (you can see details in the general tips section below).\n\t- Have not taken either these two courses, but I have taught these courses as a teaching assistant. Personally, I found CPSC 1030 to be the easiest. CPSC 1045 should be slightly easier or equal to CPSC 1150 in terms of difficulty. The difficulty of these two courses may also depend on your instructor .\n\nMy recommended courses are just courses that I have experience with. I won't recommend PSYC1115 and PSYC1215 blindly to everyone as there are also different courses you can take (see SFU WQB Requirements below).\n\n###  SFU WQB Requirements\n[SFU WQB Link](https://www.sfu.ca/ugcr/for_students/wqb_requirements.html)\n\nBelow, I am copy-pasting the information from SFU.\n\nIn SFU, every undergraduate student needs to take a minimum of 36 credits of courses designated as Writing, Quantitative, or Breadth, with a grade of C- or better to receive WQB credits.\n\nWriting Requirements: \n- one lower-division W course (CMPT105W for CS, SoSy has much more choices)\n- one upper-division W course (CfMPT376W for both CS and SoSy, must be taken at SFU)\n\nQuantitative Requirements:\n- two Q courses (we don't really need to care about this as CS majors already have a lot of quantitative courses)\n\nBreadth Requirements:\n-   two B-Hum courses (I took ENGL 1130 and APSC 1010 for this)\n-   two B-Sci courses. (I took BIOL 1115 and CPSC 2190 for this)\n\t-   MACM 101 (CPSC 2190) already counted for one B-Sci\n-   two B-Soc courses (I took PSYC 1115 and 1215 for this)\n-   two undesignated Breadth (6 units) (Any courses outside the major should qualify, my SFU shows it is ENGL 1123 and APSC 1050 for this)\n\nImportant to Remember: Breadth Courses are courses that is outside your major. So, any CPSC course with Breadth label will not be counted.\n\nTo make sure that we still have the same requirements, I recommend going to [SFU CS form website](http://www.sfu.ca/computing/current-students/undergraduate-students/forms.html) and check the graduation planner. I used Computing Science Major - Fall 2021 and Software Systems Major for this. It still have the same requirements up until the time of written.\n\nThere are many options to fulfill your courses for the SFU WQB requirement. You can check [SFU designated breadth course](https://www.sfu.ca/ugcr/for_faculty/certified_wqb_courses/certified_designated_breadth_courses.html) and BCTransferGuide for the available courses.\n\nGenerally, you do not need to finish all the WQB requirements at Langara. However, if you plan to take some electives before transferring, it is best to take the ones that are also counted as SFU Breadth courses.\n\n### Graduating with an Associate Degree\nAs an international student, an associate degree allows you to get a [post-graduation work permit](https://www.canada.ca/en/immigration-refugees-citizenship/services/study-canada/work/after-graduation/eligibility.html). This is really useful in case you may prefer to work first instead of transferring to university right away. Also, it will allow you to get preference in university admission (SFU only).\n\n[Associate Degree Link](https://langara.ca/programs-and-courses/programs/computer-science/program-curriculum.html)\n\nCourse planning can be quite challenging as you need to make sure that the course counts for both Langara Associate and SFU Graduation Requirements. Make sure to check the BCTransferGuide, SFU website, and Langara Associate Degree website.\n\nCourses I took:\n- Core courses: CPSC 1050, 1160, 1181, 2150, MATH 2362, CPSC 1150, MATH 1175, MATH 1271\n- Second-year CPSC courses: CPSC 2130 and CPSC 2221\n- Two ENGL courses: ENGL 1123 and 1130\n- Two university-transferable arts: PSYC 1115 and 1215\n- Two second-year science courses: STAT 1181 and STAT 2281\n- Four university-transferable electives (at least 1 lab science): CPSC 2190, APSC 1010, APSC 1050, BIOL 1115\n\n[Langara website to determine course attributes](https://langara.ca/programs-and-courses/courses/course-attributes.html)\n\n\nTo check whether a course is university-transferable or not, you can go to the website above and check if there is a 'Y' in the UT attribute. Better way, you can go to BCTransferGuide to check if this course is transferred to at least one University (This is told by Advising).\n\nChecking whether a course is an arts course is a bit harder, I have confirmed this on advising on November of 2020. While I don't think this have not changed at all, you can confirm this on advising again. This is what the advising person said:\n\n\u003e \"Arts¬†electives are typically non-Science/Math and non-Business¬†courses. You‚Äôre correct, we do not have an attribute for first-year¬†Arts¬†courses, however you can choose from the¬†[Arts¬†and Humanities \u0026 Social Sciences categories](https://langara.ca/programs-and-courses/courses/index.html)¬†in our Course Index when choosing¬†Arts¬†courses.\" - Langara Counselling\n\nLast but not least, if you are planning to take a lab science course. I suggest taking 3-credit lab science courses. Again, you can check Langara course attribute that fulfills the \"LSC\" requirement.\n\n### Math Diagnostic Test (MDT)\nTo be able to enroll into MATH 1171, you need to get at least 95 in MDT. 95 is the code, not the actual score. I heavily recommend studying for this test. Lower code may only allow you to take MATH 1173/ 1174/ 1175. I don't recommend taking either of these three for reasons I have stated above.\n\n### Langara English Test (LET)\nTo be able to enroll into ENGL 1123/1129/1130, you need to get at least LET 3.\n\nI didn't take LET because it was online and I thought I may transfer earlier. I ended up taking ENGL 1107, which is quite a huge waste of money.\n\nIf you intend to transfer to SFU, you can still transfer by not taking any ENGL courses. You can find any courses in BCTransferGuide that is has certified W label.\n\nI generally recommend taking ENGL courses if you want to finish the associate degree. If you don't want to get the associate, ENGL course usually takes lesser time commitment but harder to get good grades. You can take ENGL1123 for the W or ENGL1129/1130 for the B-Hum though.\n\n## FAQ\n1. Why Software Systems over Computer Science? What is the difference?\n\nFirst off, I will start by saying I don't think there is much difference between these two. Software Systems are just a subset of Computer Science. You still can be a CS major and take the same courses as the SoSy major. You can take a look at [this Reddit post](https://www.reddit.com/r/simonfraser/comments/bmt2zc/software_systems_program_bsc_masterpost/).\n\nPersonally, other reasons I chose SoSy over CS are:\n- SoSy gets priority enrollment in Surrey CS courses (they still have the same priority as CS students in Burnaby).\n- I will not need to take CMPT105W and MACM316. Honestly, I am okay taking if I need to take these two courses. But if I have to choose between taking these or the sweet upper-division CS courses, I would definitely choose the latter :).\n\nAs of Fall 2022, SFU CS also has a [concentration that you can take](https://www.sfu.ca/computing/current-students/undergraduate-students/programs/computing-science-major1.html).\n\n2. Why SFU over UBC?\n\nThis is the question I had been wondering the most when I was at Langara. I never got a solid answer only until Spring 2022.\n\nI don't think there are clear answers for everyone and the answer definitely varies from person to person. Keep in mind that these are the answers that I answered for myself.\n\n**SFU Pros:**\n- SFU offers more practical CS courses. In general, CS courses at SFU are more applied. By taking a look at SFU SoSy, there are more interesting CS courses to be found (ex. Web Architecture, Client-side WebDev, Server-side WebDev, Software Development Methods, Software Testing).\n- SFU is cheaper. As an international student, I saved at least CAD 20,000 by choosing SFU over UBC.\n- I don't need to take more lab sciences at UBC. UBC requirement is more strict. I would need to take physics and chemistry course to fulfill the science breadth requirement.\n- Computer Science is merit-based. Compared to other majors, the university you go to does not matter as much. After several years in the industry, you will be assessed more based on your industry experience, not which university you went to.\n\nHowever, I don't want to be biased. So I also want to list several reasons why UBC might be better.\n\n**UBC Pros:**\n- Prestige. The brand of the university also matters more if you were to work outside Canada.\n- Environment. As UBC is just ranked higher, there are generally smarter students that thrive there. However, My take is that those who thrive are mostly not really because of the education, but because of what they achieve on their own (clubs, projects).\n\nAt the end of the day, your answer will ultimately depends on what you think is more important for you :). Both university have strong coop programs. As long as you have a strong drive to learn, you will definitely succeed in any of these two.\n\n## General Tips\n- SFU offers admission 3 times a year (Spring, Summer, and Fall).\n- Plan your course carefully. A few hours of course planning can save you a lot of time and money.\n- If you have GPA above 3.7, you may get [a $3500 entrance scholarship at SFU](https://www.sfu.ca/students/financialaid/entrance/regulations/transfer-scholarships.html). This is really helpful!\n- Taking 3 courses and passing all of them is far better than taking 5 courses but ending up failing one of them.\n- Unless you enjoy math, try to not have more than 1 math course at one term. I would define math courses as any math/ stat course and CPSC 2190. Personally, I perform better on math course where I can finish the given suggested exercises. I don't think I can mentally handle taking two math courses while also finishing all their suggested exercises.\n- Same rule applies to heavy coding course. When you are starting out at college, it can be hard to differentiate the syntax between each programming language. It may end up making you confused on the exams if you are taking two at the same time. Not all CPSC courses are heavy coding course. I would define heavy coding course as one of the following: CPSC 1045, 1150, 1155, 1160, 1181, 2130, 2150. \n\n## General Study Tips\n- Always go to your office during hours if needed. Langara's biggest advantage is the empty office hours. There are times when my CS instructor was able to go above and beyond to help me solve my assignments.\n- Find a study buddy (if you don't have one). While I learn better alone, there will always be the time when I just don't know how to answer some questions. Even if you are the smarter one, teaching will also help you to understand the concepts better. Read the Feynman Technique for more.\n\n\n## Courses I Have Taken\n**Fall 2020**\n1. APSC 1010 - Engineering and Technology in Society\n2. APSC 1050 - Process, Form, and Convention in Professional Genres\n3. MATH 1175 - Calculus I with Applications to Life Sciences\n\n**Spring 2021**\n1. MATH 1271 - Calculus II\n2. CPSC 1050 - Introduction to Computer Science\n3. CPSC 1150 - Program Design\n4. STAT 1181 - Descriptive and Elementary Inferential Statistics\n5. BIOL 1115 - General Biology I\n\n**Summer 2021**\n1. PSYC 1215 - Introduction to Social, Personality, and Abnormal Psychology\n2. CPSC 1160 - Algorithms and Data Structures I\n3. CPSC 1181 - Object-oriented Computing\n4. ENGL 1107 - Language and Composition I\n5. MATH 2362 - Linear Algebra\n\n**Fall 2021**\n1. CPSC 2150 - Algorithms and Data Structures II\n2. CPSC 2190 - Theoretical Foundations of Computer Science\n3. ENGL 1123 - Introduction to Academic Writing\n4. PSYC 1115 - Introduction to Biological, Cognitive, and Developmental Psychology\n\n**Spring 2022**\n1. CPSC 2130 - Multimedia and Animation\n2. CPSC 2221 - Database Systems\n3. STAT 2281 - Probability and Elementary Mathematical Statistics\n4. ENGL 1130  - Modern Novel, Poetry, and Movie\n\nOverall, I am pleased with the courses I have taken. Courses that are not really useful for SFU graduation requirement are STAT 1181 and ENGL 1107. I also won't recommend BIOL 1115 as it is a 4-credit course. It has 3 lab exams, 2 midterms, and a final. Quite stressful for 1 course.\n\nIf I have to start all over again at Langara, I would definitely take roughly the same courses. The one that I would change is only BIOL 1115 to any 3-credit lab science course. I basically burnt 1 credit worth of a course as I have 61 transfer credits.\n\n## Useful Links\nAs there are so many links throughout this guide, I have listed again all the helpful transfer-related links below\n\nOfficial Website\n- BCTransferGuide - https://www.bctransferguide.ca/search\n- BCTransferGuide Associate Degree Info - https://www.bctransferguide.ca/learn-more-about/associate-degrees/transfer/\n- EducationPlannerBC -  https://educationplannerbc.ca/\n- Canada PGWP - https://www.canada.ca/en/immigration-refugees-citizenship/services/study-canada/work/after-graduation/eligibility.html\n\nLangara Websites\n- Langara Associate in CS - https://langara.ca/programs-and-courses/programs/computer-science/program-curriculum.html\n- Langara Course Attributes - https://langara.ca/programs-and-courses/courses/course-attributes.html\n\nSFU Websites\n- SFU Admission Averages - https://www.sfu.ca/students/admission/apply/admission-averages.html\n- SFU Admission Requirements - https://www.sfu.ca/students/admission/admission-requirements/transfer/college-university.html\n- SFU CS Fall 2022 - http://www.sfu.ca/students/calendar/2022/fall/programs/computing-science/major/bachelor-of-science-or-bachelor-of-arts.html\n- SFU SoSy Fall 2022 - http://www.sfu.ca/students/calendar/2022/fall/programs/software-systems/major/bachelor-of-science.html\n- SFU WQB Requirements -  https://www.sfu.ca/ugcr/for_students/wqb_requirements.html\n- SFU CS Concentrations - https://www.sfu.ca/computing/current-students/undergraduate-students/programs/computing-science-major1.html\n- SFU Transfer Scholarships - https://www.sfu.ca/students/financialaid/entrance/regulations/transfer-scholarships.html\n- SFU Designated Breadth Course - https://www.sfu.ca/ugcr/for_faculty/certified_wqb_courses/certified_designated_breadth_courses.html\n- SFU CS Form Website - http://www.sfu.ca/computing/current-students/undergraduate-students/forms.html\n\nReddit Posts\n- Langara to UBC CS Reddit - https://www.reddit.com/r/langara/comments/ufzqc0/guide_for_cs_students_planning_to_transfer_to_ubc/\n- SFU SoSy Masterpost Reddit - https://www.reddit.com/r/simonfraser/comments/bmt2zc/software_systems_program_bsc_masterpost/\n\n## Conclusion\nThank you so much for reading up until this point. I finally have made this guide after planning to make it for so long. The reasons I made this guide are mainly to make sure people avoid bad course and to save time and energy. I have an spent a lot of time planning my courses when I think it should not be that long.\n\nIn case you see any error in writing or have information to be added, feel free to reach me out.\n\n![Cat Vibing](../images/cat-vibing.gif)","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]},"/notes/straightA":{"title":"Book Summary - How to Become a Straight-A Student","content":"\n\u003e \"The simple truth is that the brute force techniques used by most students are incredibly inefficient.\" - Cal Newport\n\u003e \n\n1. Study in focused, but short blocks rather than pseudo-working through the night.\n    - Find your ideal study length. (50 minutes with 10 minutes rests, 30-5)\n    - Manage the time in daily calendar that can be updated so you can strictly follow it.\n2. Find your most common excuses with a work progress journal\n    - Write down the important tasks of each day and check off everything you've accomplished at night\n    - Give an explanation for everything that didn't get done.\n3. Use the three P's to move through exams smoothly\n    1. Planning ‚Üí Flip through the entire exam with questions to answer, and map out the time needed to answer those questions.\n    2. Proceeding ‚Üí Answer the question starting with the easier ones to the hard ones so you can get quick wins first to boost confidence.\n    3. Proofreading ‚Üí Use last 10 minutes to proofread and correct any mistake you find or add important information \n    \n    \u003caside\u003e\n    üí° Use spaced repetition to actively recall the information on your brain (That is why studying on blocks is better than cramming)\n    \n    \u003c/aside\u003e\n","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]},"/notes/subtleart":{"title":"Book Summary - The Subtle Art of Not Giving a F*ck","content":"\n- Self-help advice which tells you to become the person you want to be only reinforces the idea that you are not that thing\n- Pursuing something only reinforces that you lack it in the first place.\n- Everyone wants you to believe that the secret to a good life is to have a nicer job or a better car or a prettier girlfriend.\n- The key to a good life is not giving a fuck about more; it‚Äôs giving a fuck about less, giving a fuck about only what is true and immediate and important.\n- Because there‚Äôs an infinite amount of things we can now see or know, there are also an infinite number of ways we can discover that we don‚Äôt measure up, that we‚Äôre not good enough, that things aren‚Äôt as great as they could be.\n- The desire for a more positive experience is itself a negative experience. And, paradoxically, the acceptance of one‚Äôs negative experience is itself a positive experience.\n- Accepting your experience of life as being great and wonderful is the single greatest thing you can do for your happiness.\n- If you are able to not give a fuck about the pain your goals require, then you become unstoppable.\n- The moments when we don‚Äôt give a fuck and take action are often the moments that most define the course of our lives.\n- Don't hope for a life without problems. Hope for a life with good problems.\n- Negative emotions are a sign that something is going unaddressed. They are a call to action. Positive emotions are the reward for taking the correct action\n- Certainty is the enemy of growth.\n- All beliefs are wrong‚Äîsome are just less wrong than others.\n- Trust is the most important ingredient in any relationship for the simple reason that without trust the relationship doesn‚Äôt actually mean anything.\n\u003e ‚ÄúWe‚Äôre all going to die, all of us. What a circus! That alone should make us love each other, but it doesn‚Äôt.‚Äù -Charles Bukowski\n\u003e","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]},"/notes/term-review-2022fall":{"title":"Term Review - Fall 2022","content":"\n## Intro\nFall 2022 has been quite a rough ride as it's my first time taking 4 CMPT courses. There were some moments where I didn't get the time to revise some content, but overall, this term was pretty good. \n\n\n## Courses\n### CMPT 300 - Operating Systems I (Hazra Imran)\n**Course Experience**: 4/5 \u003cbr\u003e\n**Pros**: Interesting assignments, decent lectures (recorded), and finish-for-marks class exercises \u003cbr\u003e\n**Cons**: The exam is quite tricky and assignment requirements might not be detailed enough. \u003cbr\u003e\n**Self-feedback**: Start assignments super early to allow more time to ask later\n\nI really enjoyed CMPT300 offering by Dr. Hazra. She is quite understanding and assignments are really interesting (programs related to OS concepts in C). It could have been a 5/5 for me, but there were mainly 2 reasons: \u003cbr\u003e\n-  Some MCs in the exam cover contents that are mentioned quite rarely and you need to really understand all the way to get full marks from the select all options.\n-  The assignment requirements can be a bit vague and you need to decipher every single thing. There are some corner cases that are not yet answered. Usually, the implementation of these corner cases is up to us in the end. Having some test cases would definitely help a lot in easing students' anxiety.\n\nAnother thing is how hard and time-consuming her final is. I was caught off guard as I have plenty of times in two of her midterms.\n\nOverall, I think our instructor has tried her best to make this tough course enjoyable. I wouldn't mind taking another course with Dr. Hazra again.\n\n### CMPT 383 - Comparative Programming Languages (Anders Miltner)\n**Experience**: 5/5 \u003cbr\u003e\n**Pros**: All vitamins and assignments have test cases, and engaging lectures \u003cbr\u003e\n**Cons**: 98+ for A+ (‚ïØ¬∞‚ñ°¬∞)‚ïØÔ∏µ ‚îª‚îÅ‚îª \u003cbr\u003e\n**Self-feedback**: Make sure all corner cases are solved, some marks are off as I already felt confident having passed all the given test cases\n\nCMPT383 by Anders covers Haskell and Rust. We learned the concepts of functional programming in Haskell and how Rust handles memory very elegantly.\n\nIn the first half, I was quite intrigued by what Haskell is capable of. I didn't understand functional programming at all in the beginning. Basically, you cannot do any loops in Haskell and every variable is a constant. Yes, you heard it, it's constant. \n\nThe difference between Haskell and most programming languages (Python, Java, C) is that Haskell is **declarative** while the former is **imperative**. Declarative is telling the program what you want (without specifying how to get it), while imperative is telling the program what to do. While declarative seems more work, it might be more concise (beautiful) in some cases.\n\n``` hs\nallDivisors :: Int -\u003e [Int]\nallDivisors n = [x | x \u003c- [n, n-1..1], mod x n == 0]\n-- Haskell function that returns all divisors from a number in ascending order\n```\n\n``` py\ndef all_divisors(n: int) -\u003e [int]:\n    res = []\n    for i in range(1, n):\n        if n % i == 0:\n            res.append(i)\n    return res\n## The same function written in python\n```\n\nIn this example, I would say the Haskell code is more concise and readable than the python code. However, most things are inefficient in functional programming (as speed is not their main forte). For example, arrays are linked lists in Haskell. This makes the access time O(n) for arrays.\n\nThe second half is about rust, I find rust to be very elegant and solve a lot of problems that C has. To make it simple, you won't be having any dangling pointers in rust due to its ownership features. \n\n\u003e Each variable in rust can only have 1 owner and this value will be dropped if the owner goes out of scope.\n\nThus, compiling code can be harder in rust as they are more strict. However, you can rest assured that memory problem will happen way LESS likely if your code were to compile.\n\n### CMPT 371 - Data Communications and Networking (Ouldooz Baghban Karimi)\n**Experience**: 3/5 \u003cbr\u003e\n**Pros**: Organized canvas, caring lecturer, has recorded video (summary) \u003cbr\u003e\n**Cons**: Lecture is a bit bland, Homework is mostly answered already answered in the textbook \u003cbr\u003e\n**Self-feedback**: Read the textbook if needed as sometimes slides are way too abstract.\n\nOuldooz is caring and takes an effort in trying to make students want to succeed. However, I felt networking itself is a course that is quite boring for most students (as seen from the attendance rate compared to other courses). Most problems here are theories and I don't mind learning the theories, but compared to classes like Operating Systems, I don't find the theory in this course to be connected to each other. Thus, it makes it a bit hard to understand the bigger picture of what this course has to offer.\n\nAn improvement that could have been made is to have programming problems that relate to the theory. This would make the course to be more bearable.\n\n\n### CMPT 272 - Web I - Client-side Development (Bobby Chan)\n**Experience**: 3/5 \u003cbr\u003e\n**Pros**: Interesting topics, very hands-on lecture\u003cbr\u003e\n**Cons**: Hands-on can be very hard if you don't understand, Hard-to-ace exams \u003cbr\u003e\n**Self-feedback**: Annotate key topics as Bobby tends to be fast-paced\n\nI had the pleasure to take the first offering of CMPT 272. This course teaches you all about HTML, CSS, JavaScript, Typescript, Angular, and APIs. \n\nThe Typescript and Angular parts are quite useful and I am thrilled to know the ins and outs of building websites with them.\n\nBobby is very hands-on and I need to make sure to catch up with the materials to understand what he is talking about. Class is not recorded, and while the lecture codes are posted in GitLab, It is harder and might take way more time in understanding what the code does compare to just seeing him code in real-time.\n\nOverall, I find this course to be 3/5 as Bobby likes to put a lot of weight in midterms and finals. The average for the final was 60 and it is mandatory to pass the final to pass the course.\n\nCourse final project: [Pig Locator](../../projects/#pig-locator) \n\n## What went well\n- Able to finish all assignments on-time\n\n## What could have been better\n- Time management can be fixed in the second half\n- Rarely attended office hours as assignments are done near the deadline\n\n## Conclusion\nOverall, I really enjoyed this term's courses. Nothing much to say. Feel free to contact me if you have any questions :D.","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]},"/notes/term-review-2022summer":{"title":"Term Review - Summer 2022","content":"\n## Intro\nTerm Review is an every-4-month journal to share all my thoughts and experiences during the finished term. It acts as both my journal and course review (for those who are planning to take similar courses). Experience is given out on a scale of 5 and it is not reflective of the marks that I got, rather it is more about how I felt whether the course was useful for my learning. Pros and Cons, however, are directed to how the course is managed and how I personally think it can be taught better.\n\n## Courses\n### CMPT 295 - Computer Systems (Arrvindh Shriraman)\n**Course Experience**: 3/5 \u003cbr\u003e\n**Pros**: Assignments auto-grading, pass for marks quizzes, and recorded Lectures \u003cbr\u003e\n**Cons**: Exam questions sometimes confusing and needed to be explained during the exam\n**Self-feedback**: No need to focus on taking notes during videos, focus on the lectures, and write notes after if needed.\n\nThe hardest course of the term. It involves diving deep into the memory layout of the a program and learning a very 'useful' language called Assembly. It is refreshing to see what memory looks like behind the scene.\n\nHowever, the instructor that term was not particularly helpful in testing the knowledge of the students. The midterm average was 50 (scaled from 30~ish). While I don't feel the instructor was the best, I really liked other things including the assignments auto-testing with Github and the quizzes that can be taken up to 5 times. Lectures were also recorded and I liked it better because I can just 1.8x it and rewind if some parts are still not well understood. One thing I learned about this course is that not every lecture needs to be attended. It is far better to spend that time focusing on the recorded videos in-depth.\n\n### CMPT 276 - Introduction to Software Engineering (Bobby Chan)\n**Experience**: 4/5 \u003cbr\u003e\n**Pros**: Very applicable project, hands-on instructor \u003cbr\u003e\n**Cons**: Exam contains knowledge that needs to be memorized and carries too much weight, lecture feels very business-y and does not cover the project enough\n**Self-feedback**: Try to take ownership and be responsible. Sometimes, no one will not want to do the hard task. Also, assign strict deadlines and be communicative with your teammate.\n\nCMPT 276 is the course that I was looking forward to prior to transferring. We built a full-stack website for the group project which was the main focus of this course. The main problem is mostly about working with your teammate. Since this is usually the first time for students to learn website development, we end up trying to fix the problem a lot of quick-fix that may end up causing other bugs in the long term. The experience will definitely vary from team to team, but that is mainly how I felt.\n\nThat being said, This course has given me a lot of knowledge about building websites both front-to-back. The main thing I dislike about the course is that it tests certain knowledge that not everyone would have known (ex. asking about requesting data from API which not everyone would have known). \n  \nGroup project: [Amusement Park Website](../../projects/#parkland) \n\n\n### CMPT 213 - Object Oriented Design in Java (Victor Cheung)\n**Experience**: 3/5 \u003cbr\u003e\n**Pros**: Object Oriented Design concepts are useful for designing software \u003cbr\u003e\n**Cons**: Lectures sometimes too theoretical and not have enough examples and looking things in a bigger picture\n**Self-feedback**: Make time to revise the topics and understand what it's use cases on the broader scope\n\nI have mixed feelings about CMPT213. While it definitely carries many strong concepts, I don't think I personally gained much as I have taken an equivalent course at Langara. Especially since this course particularly involves making a tracker in a Java Swing GUI. However, the design patterns (Creational, Behavioral, and Structural) are something very useful to know.\n\nProject is useful but not as interesting as other project-based course (See [Package Deliveries Tracker](../../projects/#amazing-package-deliveries-tracker)). It's understandable since it's a 200-level course to understand more about OOP and design decision.\n\n### EDUC 100W - Selected Questions and Issues in Education (Cary Campbell)\n**Experience**: 3/5 \u003cbr\u003e\n**Pros**: Understand Critical theory and issues about education, races, etc. \u003cbr\u003e\n**Cons**: - \u003cbr\u003e\n**Self-feedback**: Depends on people, but try to find the course that you can somehow enjoy more (and maybe the one that's more beneficial).\n\nEDUC 100W is an online course. I initially planned to take only 3 courses given that I had to teach 2 sections at Langara. Learning content in this course feels somehow relaxing as I was taking 3 other complexes CS courses. I had to still give the experience a 3/5 mainly because taking an elective online will not really push me further and I just learn and finish tasks as fast as possible without truly revising the content. \n\nBut credits still need to be given when it's due. The course delivery itself feels like it is already a 5/5 by the instructor. The reading is also something I would never read if I had never taken this and it contains interesting topics about how society is often very unequal (even though it looks equal on the surface). There are also a lot of topics talking about the hidden imbalance of power and the complexity of privileges based on our gender and race.\n\n## What went well\n- Time was managed pretty well and most assignments were finished smoothly before the due date\n- Set clear expectations of what your team is capable of (in group work) and act accordingly also for yourselves\n\n## What could have been better\n- Need extra planning on the days that have many deadlines\n- Always assess whether it is truly important to attend the lecture (or use that extra commute time to get things done at home)\n\n\n## Conclusion\nAs the first term at SFU, I really enjoyed how it ended. I always thought studying at university would be drastically harder than college. Well, it technically is, but there is certain goodness of it such as lesser lecture time and somehow the lectures are more skippable. I'm looking forward to maintaining term review for future terms :))\n\nMoving forward, I was thinking and theorized that there are two routes to take for the electives. The first is to choose the one with the least amount of workload/ GPA booster course. The latter is to choose a course that might be useful for your learning (ex. Upper Div CMPT). I don't think there is a clear answer since every individual is different Realistically, I would like to try as many upper-level CMPT courses as I can but that might mean I need to spend that extra time learning instead of other fun stuff like touching the grass. However, taking easy courses can also mean you can take more of that and potentially graduate a term earlier (or maybe just enjoy the extra time and still graduate with the same amount of time). \n\nThese choices are definitely hard to make and I will need to assess this choice on a term-by-term basis depending on the time and course availability. If you are reading up until this point, yeah I realized I might think too much on this course planning thing, but this is honestly what I enjoyed. So, thank you for reading up until now :D.","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]},"/notes/tools":{"title":"Tools","content":"\n## Software \n- [TickTick](https://ticktick.com/webapp/) serves as my to-do list x habit tracker x pomodoro timer\n- Learning [Obsidian](https://obsidian.md/) to capture my thoughts\n- I also use [Notion](https://notion.so/) occassionally for its tables and collaboration features\n- [StayFocusd](https://chrome.google.com/webstore/detail/stayfocusd/laankejkbhbdhmipfmgcngdelahlfoji?hl=en) and [Forest](https://www.forestapp.cc/) have helped me to be indistractable\n- [one sec](https://one-sec.app/) and [Opal](https://www.opal.so/) have also helped me tremendously in reducing my phone's social media and screen time consumption\n\n\n## Hardware\n- I use the [latest MacBook Pro with Intel](https://en.wikipedia.org/wiki/MacBook_Pro#Fourth_generation_(Touch_Bar)) as my daily driver\n- [This Samsung 27-inch monitor](https://www.bestbuy.ca/en-ca/product/samsung-27-fhd-75hz-5ms-gtg-ips-led-freesync-gaming-monitor-lf27t350fhnxza-dark-blue-grey/14933348?cmp=seo-14933348\u0026cmp=knc-s-71700000074543335\u0026gclsrc=ds\u0026gclsrc=ds) is my first external monitor and I have been loving it\n- I type and scroll with [Logitech Keyboard and Mouse set](https://www.bestbuy.ca/en-ca/product/logitech-logitech-mk850-bluetooth-optical-ergonomic-keyboard-mouse-combo-english-920-008219/10564041). Definitely recommended!\n- The set is placed on a [Logitech Studio Desk Mat](https://www.bestbuy.ca/en-ca/product/logitech-studio-desk-mat-mid-grey/15766138) for extra protection and aesthetics ;)\n- Sometimes, I am standing with my [Ikea Trotten Standing Desk](https://www.ikea.com/ca/en/p/trotten-desk-sit-stand-white-anthracite-s59429599/)\n- If not, I am sitting on my [Kerdom Office Chair](https://www.amazon.ca/gp/product/B096TQKLV1/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8\u0026psc=1)\n- I try to make time to read books on my [4th Gen Kindle Paperwhite](https://en.wikipedia.org/wiki/Amazon_Kindle#Tenth_generation)\n","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]},"/notes/university-transfer-benefits-and-tips":{"title":"University Transfer - Benefits and Tips","content":"Note: This post has the same content from [this sfu blog](https://www.sfuia.com/blog/university-transfer-benefits-and-tips). I cross-post it as I was the writer and want to provide more content to my personal website. Hope you enjoy it!\n\n## Intro\nStudying in Canada can be a very costly decision. Especially for those who have just finished high school, it can be daunting for many of us to whether we choose the career that we want. Going to community college can ease that decision.\n\n## Background\nHello! I'm Brian. I previously graduated from Langara College with an Associate of Science in Computer Science. Now, I am continuing my study at SFU studying Software Systems. I enjoyed my time at Langara and highly recommend taking courses there.\n\n## Benefits\nThere are numerous benefits to having your first two years at a community college.\n\n### 1. Cheaper\nThe biggest reason for most is saving money. As of Sept 1, 2022, A single 3-credit course costs $1,876,20 at Langara and $1,872,25 at Douglas. The same 3-credit course costs $3,177.45 at SFU and $3,314.19 at FIC. Taking your first 60 credits (2 years) at community college will save you a lot of money. While FIC is also a college, it is important to keep in mind that its tuition fee is more expensive than SFU.\n\n### 2. Smaller Class Size\nLike FIC, classes in community colleges like Langara, Douglas, and Columbia are smaller. This is usually an advantage for most students as the class's instructor will be more accessible. In my experience, the lectures I attended in Langara was more engaging and allowed me to ask question easier if needed.\n\n### 3. More Flexible\nTaking classes in community college is also more flexible in terms of 2 things: changing majors and universities. It is not uncommon for students to change their majors as it may not be it for them. Changing majors in community college is usually easier and less restrictive. Keep in mind, it is definitely possible to change major at SFU. However, in certain cases, changing to a certain major requires having a competitive GPA in the needed courses of that major.\n\nYou can also still decide which university you are going to attend. The top two that most people choose here are either UBC (University of British Columbia) or SFU.\n\n### 4. Post-Graduation Work Permit (International Students)\nThe Post-Graduation Work Permit Program (PGWPP) allows students who have graduated from eligible Canadian designated learning institutions (DLIs) to obtain an open work permit to gain valuable Canadian work experience ([source](https://www.canada.ca/en/immigration-refugees-citizenship/corporate/publications-manuals/operational-bulletins-manuals/temporary-residents/study-permits/post-graduation-work-permit-program.html)).\n\nGraduating with an associate degree allows students to have 3 years work permit ([source](https://www.canada.ca/en/immigration-refugees-citizenship/corporate/publications-manuals/operational-bulletins-manuals/temporary-residents/study-permits/post-graduation-work-permit-program/permit.html)). This is very useful as it provides options for students to work first to get permanent residence before continuing their bachelor's degree (with hopefully domestic tuition cost after the permanent residence). While some students may not use it and go straight to university, it acts as a safety net in case they need/ want to fall back and work full-time.\n\n## Drawbacks\nThere may also be certain drawbacks to pursuing community college first.\n\n### 1. Not Guaranteed Entry\nTo transfer to SFU, students need to make sure they fulfill the university requirements and most importantly, have a competitive GPA for transferring.\n\nChecking [Admission Averages](https://www.sfu.ca/students/admission/apply/admission-averages.html) is important to make sure you know the GPA is above the accepted range.\n\n### 2. Course Planning is Harder\nCourse Planning is harder because you need to make sure that the courses you take are (1) transferrable and applicable at the transferring university and (2) useful for your associate graduation requirements if needed.\n\nSometimes, certain courses are not just offered in the community college. Therefore, students will usually just take general electives.\n\n### 3. Lesser Research/ Club Opportunities\nDue to community colleges, in general, being smaller, there are lesser professors who hire students researchers. However, keep in mind that lesser does not mean unavailable. There are still plenty of opportunities and getting a research role is usually less competitive than in a university.\n\nThe other drawback is that community colleges have lesser clubs. Clubs still exist, but it is not as many and diverse as club offered in universities.\n\n### 4. Delayed Co-op\nCo-operative Education is an educational model that formally integrates academic study with relevant, paid work experience.\n\nA student who starts their first year at university can take their co-op as early as the start of their second year with most starting their first co-op term at the end of the second year. If you were to finish your first two years at a community college, the earliest you can take a co-op term is the end of your third year. At SFU, you need to have SFU GPA in order to apply to co-op.\n\nThe first term is the workshop term where students learn about resumes, cover letter, and job interviews and the second term is the seeking term to look for jobs. Thus, transfer students need to have 12 months at SFU before starting their first co-op jobs (1st term to get SFU GPA, 2nd and 3rd for workshop and seeking).\n\n### 5. GPA is Reset\nThis is a minor drawback. But transferring means your GPA at university will be reset. It is not a definite drawback as it can be an advantage for some students to restart their GPA.\n\n## Tips\nWhile every major requires different courses to take to transfer, I will present the general guideline here for a successful transfer.\n\n1. Check [SFU Transfer Requirements](https://www.sfu.ca/students/admission/admission-requirements/transfer/college-university.html) to ensure you fulfill all the requirements for the transfer\n2. Use [BCTransferGuide ](https://www.bctransferguide.ca/transfer-options/search-courses/)and SFU Undergraduate Major requirements to check what course is transferred and needed to the major\n3. Keeping your GPA above [Admission Average](https://www.sfu.ca/students/admission/apply/admission-averages.html) is more important than taking the needed course in university as long as the overall requirement to transfer is already fulfilled\n4. SFU offers $3,500 [transfer scholarship](https://www.sfu.ca/students/financialaid/entrance/regulations/transfer-scholarships.html) for those who have GPA above 3.7\n5. Associate degree holders will have a preference in admission by having their GPA 0.25 less than required ([source](https://www.bctransferguide.ca/learn-more-about/associate-degrees/transfer/))\n6. Consulting an academic advisor is really helpful whenever you are in doubt.\n\n## Conclusion\nTransferring can be a daunting process for many people. I have also had my share of anxiety when planning the courses. The best advice I can give is to enjoy the process. Looking back, I missed the experience of taking classes at Langara and talking to instructor that is more accessible.\n\n## References\n- https://langara.ca/registration-and-records/tuition-and-service-fees/international-student-fees.html\n- https://www.douglascollege.ca/sites/default/files/docs/fees-and-related-information/International%20Fee%20Schedule%20202230%20Revised.pdf\n- http://www.sfu.ca/students/calendar/2023/spring/fees-and-regulations/tuition-fees/undergraduate.html#internationalstudents","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]},"/notes/whywrite":{"title":"Why you should write more ‚úç(‚óî‚ó°‚óî)","content":"\nIn my transition period from junior high to high school years, I used to be paid to write. Sounds cool at first, until I told everyone that I am just writing for a [game guide](https://bewient.wordpress.com/).\n\nLooking back, I regret that I did not write as much again. Aside from the good money that I got from writing the blog posts, I got to know more about the game mechanics. **Writing has helped me to refine my understanding of the game, allowing me to become a better player**.\n\nI never wrote anymore until I came past a book called [How to Take Smart Notes](https://www.amazon.ca/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y) in my senior year of high school. This book taught me many benefits of writing. This is one of the main quotes that I really resonated with:\n\n\u003e The most important advantage of writing is that it helps us to confront ourselves when we do not understand something as well as we would like to believe - S√∂nke Ahrens\n\nThere are many more things that I got from this book, but the main one is those who write are those who constantly refine their understanding of what is a good argument and what isn't.\n\nWriting will truly challenge your way of thinking. Good writing can summarize a big idea as clearly and concisely as possible. I am still far from that, but I will try!\n\nFor now, I will try to write more when I am learning any topic in college or outside of it\n\nSo, write more to become a better 'player' in whatever 'game' you are playing right now ;).\n","lastmodified":"2023-04-13T03:10:41.560206878Z","tags":[]}}